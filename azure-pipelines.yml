trigger:
  branches:
    include:
      - master

variables:

  - name: location
    value: eastus

  - name: resource-group
    value: rg-medical-cost-prediction

  - name: containerapp-environment
    value: env-medical-cost-prediction

  - name: subscription
    value: 'Data Science IAC'

  - name: containerRegistry
    value: cloudwithdeb

  - name: repository
    value: cloudwithdeb

stages:

  # Run Test on module
  - stage: TestAndBuildModule
    jobs:

      # Test Module Performance
      - job: TestModule
        displayName: Validate module accuracy
        steps:

          # Setup python version to use in your pipeline
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs:
              versionSpec: '3.10'
              addToPath: true
              architecture: 'x64'

          # Install python packages in requirements.txt file
          - task: Bash@3
            displayName: Install python packages
            inputs:
              targetType: 'inline'
              script: |
                pip install -r requirements.txt
              workingDirectory: '$(System.DefaultWorkingDirectory)/'

          # Download dataset to be used run test
          - task: Bash@3
            displayName: Download Dataset
            inputs:
              targetType: 'inline'
              script: |
                wget https://publicimages0.blob.core.windows.net/datasets/Tabular/modecal_cost/medical_cost.zip
                mv medical_cost.zip ../data
              workingDirectory: '$(System.DefaultWorkingDirectory)/notebooks'

          # Extract dataset from zip file
          - task: PythonScript@0
            displayName: Extract dataset from zip file
            inputs:
              scriptSource: 'inline'
              script: |
                import zipfile
                data=zipfile.ZipFile("../data/medical_cost.zip")
                data.extractall("../data/")
                data.close()
              workingDirectory: '$(System.DefaultWorkingDirectory)/notebooks'

          # Run unittest
          - task: Bash@3
            continueOnError: false
            displayName: Run unittest
            inputs:
              targetType: 'inline'
              script: |
                pytest -v -s
              workingDirectory: '$(System.DefaultWorkingDirectory)/model'

      # Train Module After Test Passed
      - job: BuildModel
        dependsOn: TestModule
        condition: succeeded()
        steps:
          
          # Use python version
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs:
              versionSpec: '3.10'
              addToPath: true
              architecture: 'x64'

          # Install python packages from requirements.txt file
          - task: Bash@3
            displayName: Install python packages
            inputs:
              targetType: 'inline'
              script: |
                pip install -r requirements.txt
              workingDirectory: '$(System.DefaultWorkingDirectory)/'

          # Download dataset to be used to build our model
          - task: Bash@3
            displayName: Download Dataset
            inputs:
              targetType: 'inline'
              script: |
                wget https://publicimages0.blob.core.windows.net/datasets/Tabular/modecal_cost/medical_cost.zip
                mv medical_cost.zip ../data
              workingDirectory: '$(System.DefaultWorkingDirectory)/notebooks'

          # Extract dataset from zipfile
          - task: PythonScript@0
            displayName: Extract dataset from zip file
            inputs:
              scriptSource: 'inline'
              script: |
                import zipfile
                data=zipfile.ZipFile("../data/medical_cost.zip")
                data.extractall("../data/")
                data.close()
              workingDirectory: '$(System.DefaultWorkingDirectory)/notebooks'

          # Train model and save model locally
          - task: Bash@3
            displayName: Train model
            inputs:
              targetType: 'inline'
              script: |
                mkdir module
                python train.py
                mv model.pkl module
              workingDirectory: '$(System.DefaultWorkingDirectory)/model'

          # Publish generated model
          - task: PublishPipelineArtifact@1
            displayName: publish model as an artifact
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/model/module'
              artifact: 'drop'
              publishLocation: 'pipeline'

  - stage: DockerizeApiEndpoint
    dependsOn: TestAndBuildModule
    condition: succeeded()
    jobs:

      # Test Model Endpoint
      - job: TestEndpoint
        steps:

          # Use python versioon
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs:
              versionSpec: '3.10'
              addToPath: true
              architecture: 'x64'

          # Download model from artifact
          - task: DownloadPipelineArtifact@2
            displayName: Download model
            inputs:
              buildType: 'current'
              artifactName: 'drop'
              targetPath: '$(System.DefaultWorkingDirectory)/api'
          
          # Install python packages
          - task: Bash@3
            displayName: Install python packages
            inputs:
              targetType: 'inline'
              script: |
                pip install -r requirements.txt
              workingDirectory: '$(System.DefaultWorkingDirectory)/api'

          # Run unittest on endpoint build fro model
          - task: Bash@3
            displayName: Run unittest
            inputs:
              targetType: 'inline'
              script: |
                pytest -v -s
              workingDirectory: '$(System.DefaultWorkingDirectory)/api'
      
      # Dockerize model and push to dockerhub
      - job: DockerizeEndpoint
        steps:
    
          - task: Docker@2
            displayName: Build and push image to dockerhub
            inputs:
              containerRegistry: '$(containerRegistry)'
              repository: '$(repository)'
              command: 'buildAndPush'
              Dockerfile: '$(System.DefaultWorkingDirectory)/api/Dockerfile'
              tags: |
                $(Build.BuildId)
                latest
